#!/bin/bash
# validates the article-json found in the `./article-json` directory.
# this directory is populated by the `generate-article-json.sh` script.

set -ex

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT
function ctrl_c() {
    exit 1
}

# clean up
rm -f linux-amd64 linux-arm64 validate-article-json # possible binaries generated by `validate-article-json` app
rm -f validation.log    # generated by `src/validate_article_json.py`
rm -f validate.log      # generated by `src/validate.py`
rm -rf ./article-json/valid/ ./article-json/invalid/  ./article-json/patched/

# fetch latest validator
arch=$(uname -m)
fname=""
if [ "$arch" = "x86_64" ]; then
    fname="linux-amd64"
fi

# aka "ARM64"
if [ "$arch" = "aarch64" ]; then
    fname="linux-arm64"
fi

if [ -z "$fname" ]; then
    echo "unsupported architecture: $arch"
    exit 1
fi

wget "https://github.com/elifesciences/validate-article-json/releases/latest/download/$fname" \
    --quiet \
    --output-document=validate-article-json
chmod +x validate-article-json

# validate
sample="-1"         # '-1' is 'all' articles (do not sample)
num_workers="-1"    # '-1' is unbounded, '0' is core count, anything else is abitrary.
buffer_size="2500"  # number of articles to keep in memory at once. 2.5k is ~5GB RAM
time ./validate-article-json \
    --schema-root schema/api-raml/ \
    --article-json article-json/ \
    --sample-size "$sample" \
    --num-workers "$num_workers" \
    --buffer-size "$buffer_size"
